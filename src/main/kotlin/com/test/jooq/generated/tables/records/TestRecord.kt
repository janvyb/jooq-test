/*
 * This file is generated by jOOQ.
 */
package com.test.jooq.generated.tables.records


import com.test.jooq.generated.enums.EEnum
import com.test.jooq.generated.tables.Test

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TestRecord() : UpdatableRecordImpl<TestRecord>(Test.TEST), Record4<String?, String?, String?, EEnum?> {

    var id: String?
        set(value) = set(0, value)
        get() = get(0) as String?

    var nullableColumn: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var notNullColumn: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    var discriminator: EEnum?
        set(value) = set(3, value)
        get() = get(3) as EEnum?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<String?, String?, String?, EEnum?> = super.fieldsRow() as Row4<String?, String?, String?, EEnum?>
    override fun valuesRow(): Row4<String?, String?, String?, EEnum?> = super.valuesRow() as Row4<String?, String?, String?, EEnum?>
    override fun field1(): Field<String?> = Test.TEST.ID
    override fun field2(): Field<String?> = Test.TEST.NULLABLE_COLUMN
    override fun field3(): Field<String?> = Test.TEST.NOT_NULL_COLUMN
    override fun field4(): Field<EEnum?> = Test.TEST.DISCRIMINATOR
    override fun component1(): String? = id
    override fun component2(): String? = nullableColumn
    override fun component3(): String? = notNullColumn
    override fun component4(): EEnum? = discriminator
    override fun value1(): String? = id
    override fun value2(): String? = nullableColumn
    override fun value3(): String? = notNullColumn
    override fun value4(): EEnum? = discriminator

    override fun value1(value: String?): TestRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): TestRecord {
        this.nullableColumn = value
        return this
    }

    override fun value3(value: String?): TestRecord {
        this.notNullColumn = value
        return this
    }

    override fun value4(value: EEnum?): TestRecord {
        this.discriminator = value
        return this
    }

    override fun values(value1: String?, value2: String?, value3: String?, value4: EEnum?): TestRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised TestRecord
     */
    constructor(id: String? = null, nullableColumn: String? = null, notNullColumn: String? = null, discriminator: EEnum? = null): this() {
        this.id = id
        this.nullableColumn = nullableColumn
        this.notNullColumn = notNullColumn
        this.discriminator = discriminator
    }
}
